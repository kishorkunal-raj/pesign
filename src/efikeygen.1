.TH EFIKEYGEN 1 "Mon Jan 07 2013"
.SH NAME
efikeygen \- command line tool for generating keys to use for PE image signing

.SH SYNOPSIS
\fBefikeygen\fR <[\-\-ca | \-C] [\-\-self\-sign | \-S] | [\-\-signer=\fInickname\fR]>
       <[\-\-kernel | \-\-module]>
       [\-\-token=\fItoken\fR | \-t \fItoken\fR]
       [\-\-nickname=\fInickname\fR | \-n \fInickname\fR]
       [\-\-common\-name=\fIcommon name\fR | \-c \fIcommon name\fR]
       [\-\-url=\fIurl\fR | \-u \fIurl\fR]
       [\-\-serial=\fIserial\fR | \-s \fIserial\fR]

.SH DESCRIPTION
\fBefikeygen\fR is a command line tool for generating keys and certificates
to be used with pesign.  These are standard X.509 certificates, and can
potentially be generated with any certificate creation tool.  efikeygen simply
sets generates keys with sensible options set for a key to be used for PE image
signing.

.SH OPTIONS
.TP
\fB-\-ca\fR
The certificate being generated is for a CA.

.TP
\fB-\-self-sign\fR
The generated certificate is to be self signed.

.TP
\fB-\-signer\fR=\fInickname\fR
Nickname of certificate to be used to sign the generated certificate.

.TP
\fB-\-kernel\fR
The generated certificate is to be used to sign kernels.

.TP
\fB-\-module\fR
The generated certificate is to be used to sign kernel modules.

.TP
\fB-\-token\fR=\fItoken\fR
Use the specified NSS token's certificate database.

.TP
\fB-\-nickname\fR=\fInickname\fR
The nickname to use for the generated certificate.

.TP
\fB-\-common\-name\fR=\fIcommon-name\fR
The X.509 Common Name for the generated certificate.  This should be in rfc2253
syntax, i.e. "CN=John Doe,OU=editing,O=New York Times,L=New York,ST=NY,C=US"

.TP
\fB-\-url\fR=\fIurl\fR
Informational url regarding objects signed with this key.

.TP
\fB-\-serial\fR=\fIserial number\fR
Serial number for use with this key.  A certificate is identified by its
signer and its serial number,  so it's best not to ever re-use this value
with the same signer.  By default, this value will be generated using
/dev/urandom .  It is not recommended to use this option to override that.

.SH "EXAMPLES"
Here's how you create both a CA certificate and keypair and a kernel signing certificate and keypair, and import them into yubikey PIV devices:

.RS 4
# Create a new CA key
.RE
.RS 4
host:~$ efikeygen \-C \-n my\-ca \-S \\
.RE
.RS 12
\-c "CN=CA Person,OU=My Org's CA,O=My Org"
.RE
.LP
.RS 4
# Create a kernel signing key
.RE
.RS 4
host:~$ efikeygen \-n my\-signer \-\-signer my\-ca \-k \\
.RE
.RS 12
\-c "CN=Secure Boot Signer,OU=My Org's CA,O=My Org"
.RE
.LP
.RS 4
# Save the CA to a yubikey
.RE
.LP
.RS 4
## Save it in a PKCS-12 bundle
.RE
.RS 4
host:~$ pk12util \-d /etc/pki/pesign \-o myca.pk12 \-n my\-ca
.RE
.RS 4
Enter password for PKCS12 file:
.RE
.RS 4
Re\-enter password:
.RE
.RS 4
pk12util: PKCS12 EXPORT SUCCESSFUL
.RE
.LP
.RS 4
## Import the key into the yubikey
.RE
.RS 4
host:~$ yubico\-piv\-tool \-s 9c \-a import\-key \-K PKCS12 \\
.RE
.RS 12
\-i myca.pk12
.RE
.RS 4
Enter PEM pass phrase:
.RE
.RS 4
Successfully imported a new private key.
.RE
.LP
.RS 4
## Import the certificate into the yubikey
.RE
.RS 4
host:~$ yubico\-piv\-tool \-s 9c \-a import\-certificate \\
.RE
.RS 12
\-K PKCS12 \-i myca.pk12
.RE
.RS 4
Enter PEM pass phrase:
.RE
.RS 4
Successfully imported a new certificate.
.RE
.LP
.RS 4
## Remove the CA cert from the NSS database
.RE
.RS 4
host:~$ certutil \-d /etc/pki/pesign \-D \-n my\-ca
.RE
.LP
.RS 4
# Now switch yubikeys and import the kernel signer onto another one
.RE
.LP
.RS 4
## Save it in a PKCS-12 bundle
.RE
.RS 4
host:~$ pk12util \-d /etc/pki/pesign \-o mysigner.pk12 \-n my\-signer
.RE
.RS 4
Enter password for PKCS12 file:
.RE
.RS 4
Re\-enter password:
.RE
.RS 4
pk12util: PKCS12 EXPORT SUCCESSFUL
.RE
.LP
.RS 4
## Import the key into the yubikey
.RE
.RS 4
host:~$ yubico\-piv\-tool \-s 9c \-a import\-key \-K PKCS12 \\
.RE
.RS 12
\-i mysigner.pk12
.RE
.RS 4
Enter PEM pass phrase:
.RE
.RS 4
Successfully imported a new private key.
.RE
.LP
.RS 4
## Import the certificate into the yubikey
.RE
.RS 4
host:~$ yubico\-piv\-tool \-s 9c \-a import\-certificate \\
.RE
.RS 12
\-K PKCS12 \-i mysigner.pk12
.RE
.RS 4
Enter PEM pass phrase:
.RE
.RS 4
Successfully imported a new certificate.
.RE
.LP
.RS 4
## Remove the kernel signer from the NSS database
.RE
.RS 4
host:~$ certutil \-d /etc/pki/pesign \-D \-n my\-signer
.RE
.LP
Once you have done this, the token name you need to use for signing is 'Secure\ Boot\ Signer', and the certificate nickname is 'Certificate\ for\ Digital\ Signature'.  So to sign a kernel or shim with the kernel signing key, you would do:
.LP
.RS 4
host:~$ pesign \-s \-t 'Secure\ Boot\ Signer' \\
.RE
.RS 12
\-c 'Certificate\ for\ Digital\ Signature' \\
.RE
.RS 12
\-i shimx64.efi \-o shimx64.signed.efi
.RE
.RS 4
Enter Password or Pin for "Secure Boot Signer":
.RE
.RS 4
Enter passphrase for private key:
.RE
.RS 4
Enter passphrase for private key:
.RE
.LP
On each of those prompts, you have to enter the PIN for the Yubikey.  This and the strange choice of names are because PKCS\-11 is horrible.  I'm sorry.  Now verify that it worked:
.LP
.RS 4
host:~$ pesign \-i shimx64.signed.efi \-l
.RE
.RS 4
\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
.RE
.RS 4
certificate address is 0x7fbbae061468
.RE
.RS 4
Content was not encrypted.
.RE
.RS 4
Content is detached; signature cannot be verified.
.RE
.RS 4
The signer's common name is Secure Boot Signer
.RE
.RS 4
No signer email address.
.RE
.RS 4
Signing time: Wed May 15, 2019
.RE
.RS 4
There were certs or crls included.
.RE
.RS 4
\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
.RE
.LP
Yay!
.LP
.LP
.LP

.SH "SEE ALSO"
.BR pesign (1)

.SH AUTHORS
.nf
Peter Jones
.fi
